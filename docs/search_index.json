[
["2-section-2.html", "2 教師あり学習", " 2 教師あり学習 備えます。 import numpy as np import scipy as sp import pandas as pd import matplotlib.pyplot as plt import matplotlib matplotlib.rc(&#39;font&#39;, family=&#39;IPAexGothic&#39;) # 日本語プロット設定 import mglearn "],
["2-1-section-2-1.html", "2.1 クラス分類と回帰", " 2.1 クラス分類と回帰 教師あり学習はさらに2つに分けられる。 クラス分類: クラスラベルを予測する問題。 2クラス分類 (binary classification): Yes/Noみたいな2択。 片方を陽性 (positive)、もう片方を陰性 (negative)とする場合がしばしばある。 他クラス分類 (multiclass classification): もっと選択肢多いやつ。 回帰: 連続値を予測する問題。 2つを区別するのは出力が連続かどうか。入力はどちらの問題でも連続の場合も離散的な場合もある。 "],
["2-2-section-2-2.html", "2.2 汎化、過剰適合、適合不足", " 2.2 汎化、過剰適合、適合不足 汎化能力: 未知のデータ(訓練に使ってないデータ)に対する正しい値を予測する能力。 過剰適合: 訓練データはめっちゃ正確に予測できるけど新しいデータはてんでダメという状態。 適合不足: 訓練データすらちゃんと予測できてないという状態。 一般的にはモデルを複雑にするほど訓練データに適合していく。適合不足でなく、過剰適合にならない適度なモデルの複雑さの時に汎化能力が最大になる。そこを目指そう。 2.2.1 モデルの複雑さとデータセットの大きさ モデルが複雑でも、データセットが大きければ過剰適合を避けられる。 適度な複雑さのモデルと十分に大きなデータセットを使うことが成功のポイント。 "],
["2-3-section-2-3.html", "2.3 教師あり機械学習アルゴリズム", " 2.3 教師あり機械学習アルゴリズム 2.3.1 サンプルデータセット 人工的な単純なデータセットと、実世界の割と複雑なデータセットを使う。 2.3.1.1 人工的な単純なデータセット 単純なデータセットはmglearnで生成する。 forge: mglearn.datasets.make_forge()で生成する2クラス分類向けデータ。 2つの特徴量と1つの2値目的変数をもつ。 X, y = mglearn.datasets.make_forge() mglearn.discrete_scatter(X[:, 0], X[:, 1], y) plt.legend([&quot;Class 0&quot;, &quot;Class 1&quot;], loc = 4) # 凡例 plt.xlabel(&quot;第1特徴量&quot;) plt.ylabel(&quot;第2特徴量&quot;) wave: mglearn.datasets.make_waveで生成する回帰向けデータ。 1つの特徴量と1つの目的変数を持つ。 X, y = mglearn.datasets.make_wave(n_samples = 40) plt.plot(X, y, &#39;o&#39;) plt.xlabel(&quot;特徴量&quot;) plt.ylabel(&quot;目的変数&quot;) 2.3.1.2 実データ 実データはscikit-learnに入ってるものを使う。第1章でも説明したBunchクラスになっている。 cancer: ウィスコンシン乳癌データセット 目的変数は良性(benign)と悪性(malignant)の2値。 特徴量は30。 データポイントは569点。 from sklearn.datasets import load_breast_cancer cancer = load_breast_cancer() print(cancer.keys()) ## dict_keys([&#39;target&#39;, &#39;feature_names&#39;, &#39;data&#39;, &#39;DESCR&#39;, &#39;target_names&#39;]) print(cancer.data.shape) ## (569, 30) print(cancer.target_names) ## [&#39;malignant&#39; &#39;benign&#39;] print(np.bincount(cancer.target)) ## [212 357] boston_housing: 1970年代のボストン近郊の住宅価格。 住宅価格の中央値が目的変数。 特徴量は13。 データポイントは506点。 from sklearn.datasets import load_boston boston = load_boston() print(boston.data.shape) ## (506, 13) print(boston.feature_names) ## [&#39;CRIM&#39; &#39;ZN&#39; &#39;INDUS&#39; &#39;CHAS&#39; &#39;NOX&#39; &#39;RM&#39; &#39;AGE&#39; &#39;DIS&#39; &#39;RAD&#39; &#39;TAX&#39; &#39;PTRATIO&#39; ## &#39;B&#39; &#39;LSTAT&#39;] 特徴量同士の積を求めたりして、新しい特徴量を導出することを特徴量エンジニアリングと呼ぶ。 boston_housingに対し、重複ありで2つの特徴量の積を求め、データセットの拡張を試みる。 作業が面倒なので既に拡張したものがmglearn.datasets.load_extended_boston()で読み込めます。 X, y = mglearn.datasets.load_extended_boston() print(X.shape) ## (506, 104) "],
["2-4-1-k-.html", "2.4 アルゴリズム1 \\(k\\)-最近傍法", " 2.4 アルゴリズム1 \\(k\\)-最近傍法 a.k.a. \\(k\\)-NN 近いやつは大体おんなじ。 2.4.1 \\(k\\)-最近傍法によるクラス分類 \\(k\\)は参考にする近傍点の個数。 1-NNの例。 mglearn.plots.plot_knn_classification(n_neighbors=1) 3-NNの例 近傍点が複数のときは多数決で決める。 mglearn.plots.plot_knn_classification(n_neighbors=3) scikit-learnでやる。 from sklearn.model_selection import train_test_split X, y = mglearn.datasets.make_forge() X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) from sklearn.neighbors import KNeighborsClassifier clf = KNeighborsClassifier(n_neighbors=3).fit(X_train, y_train) print(clf.score(X_test, y_test)) ## 0.8571428571428571 2.4.2 KNeighborsClassifierの解析 特徴量が2つしかなければ、散布図が描ける。 散布図上のあらゆる箇所についてもしその場所に点があったらと考えて判別ができる。 つまり、特徴量がつくる平面を分類クラスで塗り分けることができる。 境界線を決定境界と呼ぶ。 fig, axes = plt.subplots(1, 3, figsize = (10, 3)) for n, ax in zip([1, 3, 9], axes): clf = KNeighborsClassifier(n_neighbors = n).fit(X, y) mglearn.plots.plot_2d_separator(clf, X, fill=True, eps = 0.5, ax = ax, alpha = .4) mglearn.discrete_scatter(X[:, 0], X[:, 1], y, ax = ax) ax.set_title(&quot;{} neighbor(s)&quot;.format(n)) ax.set_xlabel(&quot;特徴量 0&quot;) ax.set_ylabel(&quot;特徴量 1&quot;) axes[0].legend(loc=3) 近傍点が多いほど境界がなめらか = モデルは単純になる。 近傍点1 = 最も複雑なモデル 近傍点数 = データ数 -&gt; ただの多数決 ということは近傍点数の数を増やしていくと、どこかで汎化能力のピークが…？ cancerデータセットで試してみる。 from sklearn.datasets import load_breast_cancer cancer = load_breast_cancer() X_train, X_test, y_train, y_test = train_test_split( cancer.data, cancer.target, stratify = cancer.target, random_state = 66 ) training_accuracy = [] test_accuracy = [] n_settings = range(1, 11) for n in n_settings: clf = KNeighborsClassifier(n_neighbors = n).fit(X_train, y_train) training_accuracy.append(clf.score(X_train, y_train)) test_accuracy.append(clf.score(X_test, y_test)) plt.plot(n_settings, training_accuracy, label = &quot;訓練セット精度&quot;) plt.plot(n_settings, test_accuracy, label = &quot;テストセット精度&quot;) plt.ylabel(&quot;精度&quot;) plt.xlabel(&quot;近傍点数&quot;) plt.legend() 2.4.3 \\(k\\)-近傍回帰 kNNは回帰もできる。 1-NNでは近傍点の値が新しい観測値に対応する値だと考える。 mglearn.plots.plot_knn_regression(n_neighbors = 1) 近傍点が複数の時は平均値を使う。 mglearn.plots.plot_knn_regression(n_neighbors = 3) scikit-learnでは、KNeighborsRegressorクラスに実装されてる。 from sklearn.neighbors import KNeighborsRegressor X, y = mglearn.datasets.make_wave(n_samples = 40) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) reg = KNeighborsRegressor(n_neighbors = 3).fit(X_train, y_train) print(reg.score(X_test, y_test)) ## 0.8344172446249604 2.4.4 KNeighborsRegressorの解析 1次元のデータセットに対する予測値は、近傍点数\\(k\\)に対してどのように変化するか？ # プロット先を3つ作る fig, axes = plt.subplots(1, 3, figsize = (15, 4)) # -3〜3までの間にデータポイントを1000点作る line = np.linspace(-3, 3, 1000).reshape(-1, 1) for n_neighbors, ax in zip([1, 3, 9], axes): reg = KNeighborsRegressor(n_neighbors = n_neighbors) reg.fit(X_train, y_train) ax.plot(line, reg.predict(line)) ax.plot(X_train, y_train, &#39;^&#39;) ax.plot(X_test, y_test, &#39;v&#39;) ax.set_title( &quot;{} 近傍点\\n 訓練スコア: {:.2f} テストスコア{:.2f}&quot;.format( n_neighbors, reg.score(X_train, y_train), reg.score(X_test, y_test))) ax.set_xlabel(&quot;特徴量&quot;) ax.set_ylabel(&quot;目的変数&quot;) axes[0].legend([&quot;モデルによる予測値&quot;, &quot;訓練データ&quot;, &quot;テストデータ&quot;], loc=&quot;best&quot;) \\(k=1\\)の場合は予測値が全ての訓練データを通るので、モデルが不安定になる。 近傍点を増やしていくと予測は滑らかになるが、その反面訓練データへの適合度が下がる。 2.4.5 利点と欠点とパラメータ 利点 モデルが理解しやすい。 あまり調整しなくても性能が出やすい。 モデル構築は高速 欠点 訓練セットが大きくなると予測が遅くなる。 実際に使う前には前処理を行うことが重要。 疎なデータセット(特徴量の多くが0である)に対しては十分な性能が出にくい。 上記の理由から、kNNは実際に使われることは少ない。 "],
["2-5-2-.html", "2.5 アルゴリズム2 線形モデル", " 2.5 アルゴリズム2 線形モデル 2.5.1 線形モデルによる回帰 線形モデルによる予測式は… \\[\\hat{y} = w[0]\\times x[0] + w[1]\\times x[1] + ... + w[p]\\times x[p] + b\\] \\(\\hat{y}\\)は予測値で、\\(w\\)と\\(b\\)はモデルのパラメータ。\\(x\\)はある一つのデータポイントの特徴量。 予測値は、データポイントを適当に重み付けしたもの、と見ることもできる。 waveに線形回帰を適用してプロットしてみよう。 mglearn.plots.plot_linear_regression_wave() ## w[0]: 0.393906 b: -0.031804 線形モデルを利用した回帰にはいろいろなアルゴリズムがあって、それぞれ以下の点で異なっている。 どのようにパラメータ\\(w\\)と\\(b\\)を学習するか。 モデルの複雑さをどのように制御するのか。 2.5.2 線形回帰(通常最小二乗法) 予測値と真値の平均二乗誤差 (mean squared error) を最小にするようなパラメータを求める。 線形回帰には複雑さを制御するパラメータがない。できない。 from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression X, y = mglearn.datasets.make_wave(n_samples = 60) X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42) lr = LinearRegression().fit(X_train, y_train) \\(w\\)は係数 (coefficient)と呼ばれ、coef_に格納される。 \\(b\\)は切片 (intercept)と呼ばれ、intercept_に格納される。 print(lr.coef_) ## [0.39390555] print(lr.intercept_) ## -0.03180434302675973 訓練データから得られた属性にアンダースコアを付けるのはscikit-learnの慣習である。 coef_は特徴量1つに対して1つの値をもつNumPy配列となる。 線形回帰の性能は決定係数\\(R^2\\)として求められる。 print(lr.score(X_train, y_train)) ## 0.6700890315075756 print(lr.score(X_test, y_test)) ## 0.6593368596863701 ここで訓練セットとテストセットの\\(R^2\\)があんまり違わないのは（予測性能はともかく）過剰適合していないことを示している。通常、特徴量が多いほど過剰適合のリスクが高まる。拡張したboston_housingで確認してみよう。 X, y = mglearn.datasets.load_extended_boston() X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0) lr = LinearRegression().fit(X_train, y_train) \\(R^2\\)を訓練セットとテストセットで比較してみよう。 print(lr.score(X_train, y_train)) ## 0.9523526436864239 print(lr.score(X_test, y_test)) ## 0.6057754892935757 両者に乖離が見られるのは、過剰適合している可能性がある。 モデルの複雑さを制御できれば良いのだが、線形回帰にはそのためのパラメータがない。パラメータを導入する方法としてリッジ回帰がある。 2.5.3 リッジ回帰 係数が多いからモデルが複雑になる。 係数が0＝その係数を考慮しない。 係数が小さければモデルは単純になるのでは🤔 極端な話係数が全部ゼロなら入力に関わらず一定の値(平均とか)を出力するモデルになる。 係数ベクトルの長さを最小化しよう！→リッジ回帰 from sklearn.linear_model import Ridge ridge = Ridge().fit(X_train, y_train) # データは拡張Boston housingのまま print(ridge.score(X_train, y_train)) ## 0.8860578560395836 print(ridge.score(X_test, y_test)) ## 0.7527139600306947 訓練セットへの予測能力が下がったけどテストセットへの予測能力が上がった！ モデルを単純にすることで汎化能力が上がっている。 リッジ回帰におけるモデルの単純さを制御するパラメータ: \\(\\alpha\\) 大きいほど制約が強い = モデルが単純になる sklearnのデフォルトは1.0 何が良いかはデータ次第で、自動的には調整されない（後で多分チューニング方法が出て来る）。 ### alphaを10倍にしてみる パラメータはオブジェクト生成時に指定 ridge10 = Ridge(alpha = 10).fit(X_train, y_train) print(ridge10.score(X_train, y_train)) ## 0.7883461511233252 print(ridge10.score(X_test, y_test)) ### alphaを0.1倍にしてみる パラメータはオブジェクト生成時に指定 ## 0.6358967327447733 ridge01 = Ridge(alpha = .1).fit(X_train, y_train) print(ridge01.score(X_train, y_train)) ## 0.9285782082010734 print(ridge01.score(X_test, y_test)) ## 0.7717933688844941 \\(\\alpha\\)の大きさと係数の関係をプロットしてみる。\\(\\alpha\\)が大きいほど係数の絶対値は小さくなるはず… plt.plot(ridge.coef_, &#39;s&#39;, label=&quot;Ridge alpha=1&quot;) plt.plot(ridge10.coef_, &#39;^&#39;, label=&quot;Ridge alpha=10&quot;) plt.plot(ridge01.coef_, &#39;v&#39;, label=&quot;Ridge alpha=0.1&quot;) plt.plot(lr.coef_, &#39;o&#39;, label=&quot;LinearRegression&quot;) plt.xlabel(&quot;係数のインデックス&quot;) plt.ylabel(&quot;係数の値&quot;) plt.hlines(0, 0, len(lr.coef_)) plt.ylim(-25, 25) plt.legend() データサイズを増やしていくとスコアはどのように変化するか？ 学習曲線 (learning curve): モデルの性能をデータセットサイズとの関係で表したもの。 リッジ回帰は正則化の影響で常に線形回帰より訓練データへの適合が低い。 テストセットへの適合はデータセットサイズが小さいうちはリッジ回帰の方が優れる。 データセットサイズが大きくなると、リッジ回帰と線形回帰の差はなくなる。 データセットサイズが大きくなると、(単純なモデルでは)過剰適合することが難しくなる。 mglearn.plots.plot_ridge_n_samples() plt.xlabel(&quot;訓練セットのサイズ&quot;) plt.ylabel(&quot;スコア(R²)&quot;) plt.legend(labels=[&quot;リッジ 訓練セット&quot;, &quot;リッジ テストセット&quot;, &quot;線形回帰 訓練セット&quot;, &quot;線形回帰 テストセット&quot;]) 2.5.4 Lasso Ridgeとは異なる形で係数に制約をかける線形回帰。 L1正則化: L1ノルム、つまり係数の絶対値の和に制約をかける。 いくつかの係数が完全に0になる場合があるという点がRidgeと大きく異なる。 係数が完全に0=係数を除外しているということなので、自動的な変数選択ともみなせる。 変数が減ればモデルを解釈しやすくなるという利点もある。 Lassoをboston_housingに適用する。 from sklearn.linear_model import Lasso lasso = Lasso().fit(X_train, y_train) print(&quot;訓練データスコア: {:.2f}&quot;.format(lasso.score(X_train, y_train))) ## 訓練データスコア: 0.29 print(&quot;テストデータスコア: {:.2f}&quot;.format(lasso.score(X_test, y_test))) ## テストデータスコア: 0.21 print(&quot;選択された特徴量数: {}&quot;.format(np.sum(lasso.coef_ != 0))) ## 選択された特徴量数: 4 スコアが非常に悪いのは、パラメータを全くチューニングしていないことによる。 Lassoには複雑さの度合いを制御するパラメータalphaがある。alphaのデフォルトは1.0で、小さくするほど複雑なモデルになる。 alphaを手動で減らす際には、合わせてmax_iterを増やしてやる必要がある。 lasso001 = Lasso(alpha = 0.01, max_iter=100000).fit(X_train, y_train) print(&quot;訓練データスコア: {:.2f}&quot;.format(lasso001.score(X_train, y_train))) ## 訓練データスコア: 0.90 print(&quot;テストデータスコア: {:.2f}&quot;.format(lasso001.score(X_test, y_test))) ## テストデータスコア: 0.77 print(&quot;選択された特徴量数: {}&quot;.format(np.sum(lasso001.coef_ != 0))) ## 選択された特徴量数: 33 alphaを小さくしすぎると過剰適合する。 lasso00001 = Lasso(alpha = 0.0001, max_iter=100000).fit(X_train, y_train) print(&quot;訓練データスコア: {:.2f}&quot;.format(lasso00001.score(X_train, y_train))) ## 訓練データスコア: 0.95 print(&quot;テストデータスコア: {:.2f}&quot;.format(lasso00001.score(X_test, y_test))) ## テストデータスコア: 0.64 print(&quot;選択された特徴量数: {}&quot;.format(np.sum(lasso00001.coef_ != 0))) ## 選択された特徴量数: 94 Ridgeでやったように係数の大きさをプロットしてみよう。 plt.plot(lasso.coef_, &#39;s&#39;, label = &quot;Lasso alpha = 1&quot;) plt.plot(lasso001.coef_, &#39;^&#39;, label = &quot;Lasso alpha = 0.01&quot;) plt.plot(lasso00001.coef_, &#39;v&#39;, label = &quot;Lasso alpha = 0.0001&quot;) plt.plot(ridge01.coef_, &#39;o&#39;, label = &quot;Ridge alpha = 0.1&quot;) plt.legend(ncol = 2, loc = (0, 1.05)) plt.ylim = (-25, 25) plt.xlabel(&quot;係数のインデックス&quot;) plt.ylabel(&quot;係数の大きさ&quot;) 合わせてプロットしたRidge(\\(\\alpha=0.1\\))は、Lasso(\\(\\alpha=0.01\\))と同じくらいの性能であるが、Ridgeでは大きさが小さいながらも係数の値は0にはなっていないものが多いのに対して、Lassoでは大きさが0の係数が目立つ。 実際にはまずRidgeを試すと良い。 係数がたくさんあって重要なのはそのうちの幾つか少数であると予想されるのであれば、Lassoを試すと良い。 RidgeとLassoのペナルティを組合せたものとしてElasticNetがある。結果は良好であるが、チューニングすべきパラメータが増えるという欠点がある。 2.5.5 クラス分類のための線形モデル 線形モデルでクラス分類を行う場合は以下の式を用いる。 \\[\\hat{y} = w[0]\\times x[0] + w[1]\\times x[1] + \\dots + w[p]\\times x[p] + b &gt; 0\\] 出力\\(y\\)が0を超えるかどうかで判別する。 出力\\(y\\)は特徴量の線形関数であり、2つのクラスを直線や平面、超平面で分割する決定境界となる。 線形モデルを学習するアルゴリズムは以下の観点から分類される。 どのような尺度で訓練データへの適合度を測るか。 正則化を行うか。行うならどのような方法か。 ロジスティック回帰と線形サポートベクターマシンは一般的な線形クラスアルゴリズムである。 LogisticRegressionとLinearSVCによりforgeを分類する決定境界を可視化する。 from sklearn.linear_model import LogisticRegression from sklearn.svm import LinearSVC X, y = mglearn.datasets.make_forge() fig, axes = plt.subplots(1, 2, figsize = (10, 3)) for model, ax in zip([LinearSVC(), LogisticRegression()], axes): clf = model.fit(X, y) mglearn.plots.plot_2d_separator(clf, X, fill = False, eps = 0.5, ax = ax, alpha = 0.7) mglearn.discrete_scatter(X[:, 0], X[:, 1], y, ax = ax) ax.set_title(&quot;{}&quot;.format(clf.__class__.__name__)) ax.set_xlabel(&quot;特徴量 0&quot;) ax.set_ylabel(&quot;特徴量 1&quot;) axes[0].legend() 2つのクラス分類器はいずれも正則化パラメータCを持つ。Cは大きいほど正則化が弱くなる。 Cがは小さいとデータポイントの多数派に適合しようとするが、大きくすると個々のデータポイントを正確に分類しようとする。 mglearn.plots.plot_linear_svc_regularization() 上記の例では、Cを大きくすると誤分類した少数の点に決定境界が大きく影響されていることがわかる。 低次元の場合は線形分類は制約が強いように思えるが、次元数が大きくなるとモデルは強力になり、むしろ過剰適合をいかに避けるかがポイントになる。 cancerにLogisticRegressionを適用してみる。 from sklearn.datasets import load_breast_cancer cancer = load_breast_cancer() X_train, X_test, y_train, y_test = train_test_split( cancer.data, cancer.target, stratify = cancer.target, random_state = 42 ) logreg = LogisticRegression().fit(X_train, y_train) print(&quot;テストセットスコア: {:.3f}&quot;.format(logreg.score(X_train, y_train))) ## テストセットスコア: 0.953 print(&quot;訓練セットスコア: {:.3f}&quot;.format(logreg.score(X_test, y_test))) ## 訓練セットスコア: 0.958 訓練セットとテストセットのスコアが近い場合は適合不足を疑う。 パラメータCを大きくしてモデルの複雑さを上げる。 logreg100 = LogisticRegression(C=100).fit(X_train, y_train) print(&quot;テストセットスコア: {:.3f}&quot;.format(logreg100.score(X_train, y_train))) ## テストセットスコア: 0.967 print(&quot;訓練セットスコア: {:.3f}&quot;.format(logreg100.score(X_test, y_test))) ## 訓練セットスコア: 0.965 精度が上がった。今度は逆にパラメータCを小さくしてみる。 logreg001 = LogisticRegression(C=0.01).fit(X_train, y_train) print(&quot;テストセットスコア: {:.3f}&quot;.format(logreg001.score(X_train, y_train))) ## テストセットスコア: 0.934 print(&quot;訓練セットスコア: {:.3f}&quot;.format(logreg001.score(X_test, y_test))) ## 訓練セットスコア: 0.930 精度が下がった。最後に、3つのパターンについて係数を可視化してみる。 plt.plot(logreg.coef_.T, &#39;o&#39;, label = &quot;C=1&quot;) plt.plot(logreg100.coef_.T, &#39;^&#39;, label = &quot;C=100&quot;) plt.plot(logreg001.coef_.T, &#39;v&#39;, label = &quot;C=0.01&quot;) plt.xticks(range(cancer.data.shape[1]), cancer.feature_names, rotation=90) plt.hlines(0, 0, cancer.data.shape[1]) plt.xlabel(&quot;特徴量&quot;) plt.ylabel(&quot;係数の大きさ&quot;) plt.legend() デフォルトではLogisticRegressionはL2正則化を行う。 penalty=&quot;l1&quot;の指定でL1正則化に切り替えることができる。より単純なモデルが欲しければこちらを試すと良い。 for C, marker in zip([0.001, 1, 100], [&#39;o&#39;, &#39;^&#39;, &#39;v&#39;]): lr_l1 = LogisticRegression(C = C, penalty = &quot;l1&quot;).fit(X_train, y_train) print(&quot;訓練セットに対する精度(C={:.3f}): {:.2f}&quot;.format(C, lr_l1.score(X_train, y_train))) print(&quot;テストセットに対する精度(C={:.3f}): {:.2f}&quot;.format(C, lr_l1.score(X_test, y_test))) plt.plot(lr_l1.coef_.T, marker, label = &quot;C={:.3f}&quot;.format(C)) ## 訓練セットに対する精度(C=0.001): 0.91 ## テストセットに対する精度(C=0.001): 0.92 ## 訓練セットに対する精度(C=1.000): 0.96 ## テストセットに対する精度(C=1.000): 0.96 ## 訓練セットに対する精度(C=100.000): 0.99 ## テストセットに対する精度(C=100.000): 0.98 plt.xticks(range(cancer.data.shape[1]), cancer.feature_names, rotation = 90) plt.hlines(0, 0, cancer.data.shape[1]) plt.xlabel(&quot;特徴量&quot;) plt.ylabel(&quot;係数の大きさ&quot;) plt.legend(loc = 3) 2.5.6 線形モデルによる多クラス分類 大抵の線形クラス分類は2クラス分類にしか対応しておらず、そのままでは多クラスに拡張することはできない。 ロジスティック回帰は例外 拡張するための方法として1対その他(one-vs.-rest)アプローチがある。 1つのクラスとその他のクラスという2クラス分類に対してモデルを学習させる。 データポイントに対しては全ての2クラス分類を実行する。 一番高いスコアのクラス分類器の分類結果を予測結果とする。 クラスごとに2クラス分類が存在するということなので、クラスごとに以下の式で表す確信度が存在し、確信度が最も大きいクラスがクラスラベルとなる。 \\[ w[0] \\times x[0] + w[1] \\times x[1] + \\dots + w[p] \\times x[p] + b\\] 多クラスロジスティック回帰と1対多アプローチは多少異なるが、1クラスあたり係数ベクトルと切片ができるという点は共通している。 3クラス分類に対して1対多アプローチを試す。データはガウス分布からサンプリングした2次元データセットとする。 from sklearn.datasets import make_blobs X, y = make_blobs(random_state = 42) mglearn.discrete_scatter(X[:, 0], X[:, 1], y) plt.xlabel(&quot;特徴量0&quot;) plt.ylabel(&quot;特徴量1&quot;) plt.legend([&quot;クラス0&quot;, &quot;クラス1&quot;, &quot;クラス2&quot;]) このデータセットでLinearSVCを学習させる。 linear_svm = LinearSVC().fit(X, y) print(&quot;係数ベクトルの形状&quot;, linear_svm.coef_.shape) ## 係数ベクトルの形状 (3, 2) print(&quot;切片ベクトルの形状&quot;, linear_svm.intercept_.shape) ## 切片ベクトルの形状 (3,) 係数ベクトルの形状が3行2列ということは、各行に各クラスに対応する2次元の係数ベクトルが格納されているということである。 切片ベクトルはクラスの数に対応している。 上記2点をまとめると、3つのクラス分類器が得られているということである。 3つのクラス分類器が作る決定境界を可視化する。 mglearn.discrete_scatter(X[:, 0], X[:, 1], y) line = np.linspace(-15, 15) for coef, intercept, color in zip(linear_svm.coef_, linear_svm.intercept_, [&#39;b&#39;, &#39;r&#39;, &#39;g&#39;]): plt.plot(line, -(line * coef[0] + intercept) / coef[1], c = color) plt.xlabel(&quot;特徴量0&quot;) plt.ylabel(&quot;特徴量1&quot;) plt.legend([&#39;クラス0&#39;, &#39;クラス1&#39;, &#39;クラス2&#39;, &#39;クラス0の決定境界&#39;, &#39;クラス1の決定境界&#39;, &#39;クラス2の決定境界&#39;], loc = (1.01, 0.3)) "]
]
